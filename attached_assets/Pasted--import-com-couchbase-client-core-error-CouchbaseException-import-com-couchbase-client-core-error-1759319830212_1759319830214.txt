	import com.couchbase.client.core.error.CouchbaseException;
	import com.couchbase.client.core.error.DocumentExistsException;
	import com.couchbase.client.core.error.DocumentNotFoundException;
	import com.couchbase.client.core.error.UnambiguousTimeoutException;
	import com.couchbase.client.java.*;
	import com.couchbase.client.java.kv.*;
	import com.couchbase.client.java.json.*;
	import java.time.Duration;
	public class Program {
		public static void main(String[] args) {
			// Start of user input
			// Update these variables to point to your Couchbase Capella instance and credentials.
			String endpoint = "couchbases://cb.xtocbxtfigp0wzjr.cloud.couchbase.com"; // Replace this with Connection String
			String username = "<<username>>"; // Replace this with username from cluster access credentials
			String password = "<<password>>"; // Replace this with password from cluster access credentials
			String bucketName = "<<replace with your bucket name>>";
			String scopeName = "<<replace with your scope name>>";
			String collectionNme = "<<replace with your collection name>>";
			// Sample airline document
			JsonObject sample_airline = JsonObject.create()
					.put("type", "airline")
					.put("id", 8091)
					.put("callsign", "CBS")
					.putNull("iata")
					.putNull("icao")
					.put("name", "Couchbase Airways");
			// Key will equal: "airline_8091"
			String key = "airline_8091";
			// End of user input variables
			try {
				// Connect to cluster with specified credentials
				Cluster cluster = Cluster.connect(
						endpoint,
						ClusterOptions.clusterOptions(username, password).environment(env -> {
							// Use the pre-configured profile below to avoid latency issues with your connection.
							env.applyProfile("wan-development");
						})
				);
				// Get a bucket reference
				Bucket bucket = cluster.bucket(bucketName);
				// Wait until the cluster is ready for use.
				bucket.waitUntilReady(Duration.ofSeconds(10));
				// Get reference to scope
				Scope scope = bucket.scope(scopeName);
				// Get reference to collection
				Collection collection = scope.collection(collectionNme);
				// Simple K-V operation - to create a document with specific ID
				try {
					MutationResult result = collection.insert(key, sample_airline);
					System.out.println("Document created successfully with CAS: " + result.cas());
				} catch (DocumentExistsException ex) {
					System.err.println("The document already exists!");
				} catch (CouchbaseException ex) {
					System.err.println("Exception when creating a document " + ex);
				}
				// Simple K-V operation - to retrieve a document by ID
				JsonObject result = null;
				try {
					result = collection.get(key).contentAsObject();
					System.out.println("Document fetched successfully " + result.toString());
				} catch (DocumentNotFoundException ex) {
					System.out.println("Document not found!");
				}
				// Simple K-V operation - to update a document by ID
				try {
					result.put("name", "Couchbase Airways!!");
					MutationResult mutationResult = collection.upsert(key, result);
					System.out.println("Document updated successfully with CAS: " + mutationResult.cas());
				} catch (DocumentNotFoundException ex) {
					System.out.println("Document not found!");
				}
				// Simple K-V operation - to delete a document by ID
				try {
					MutationResult mutationResult = collection.remove(key);
					System.out.println("Document deleted successfully with CAS: " + mutationResult.cas());
				} catch (DocumentNotFoundException ex) {
					System.out.println("Document not found!");
				}
				} catch (UnambiguousTimeoutException ex) {
					// Simplest approach is to look at the exception string
					boolean authFailure = ex.toString().contains("Authentication Failure");
					if (authFailure) {
						System.out.println("Authentication Failure Detected");
					} else {
						System.out.println("Error:");
						System.out.println(ex.getMessage());
					}
				}
			}
		}